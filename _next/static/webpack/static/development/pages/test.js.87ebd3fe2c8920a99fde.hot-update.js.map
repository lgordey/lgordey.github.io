{"version":3,"file":"static/webpack/static/development/pages/test.js.87ebd3fe2c8920a99fde.hot-update.js","sources":["webpack:///./pages/test.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport withStyles from 'react-jss';\n\nimport { basedGif, basedJpg, basedPng } from '../basedImages';\n\nconst styles = {\n  testWrapper: {\n    width: '100%',\n    maxWidth: 800,\n    margin: '0 auto'\n  },\n  btnWrapper: {\n    padding: '0 20px 20px 0',\n    border: '10px solid gray',\n    marginTop: 20,\n    '& button, & a, & span': {\n      margin: '20px 0 0 20px',\n      display: 'inline-block'\n    }\n  }\n};\n\nconst invokeMethods = ['getMe', 'getPhone', 'getContacts', 'getUserProfile', 'enableNotifications', 'disableNotifications'];\n\nconst copyToClipboardParams = ['some text'];\n\nconst commonParams = {\n  userIdProd: '4e8d2806-f3c7-11e8-a5aa-0242ac15000a',\n  userIdDev: '48dc41ec-0424-11e9-a03c-ce89e00e5d74'\n};\n\nconst shareParams = {\n  textOnly: ['privet ya kakaoi-to straniy text ЛАЛА'],\n  gif: ['Look at this magical present!', basedGif],\n  jpg: ['Look at this silly upside-down cat!', basedJpg],\n  jpgOnly: ['', basedJpg],\n  png: ['Look at this beautiful Earth-in-space wallpaper!', basedPng],\n};\n\nconst vibrateParams = {\n  once: [[1000]],\n  march: [[\n    291, 291,\n    291, 291,\n    291, 291,\n    291, 291,\n    145, 146, 145, 146,\n    291, 291,\n    145, 146, 145, 728,\n\n    291, 291,\n    291, 291,\n    291, 291,\n    291, 291,\n    145, 146, 145, 146,\n    291, 291,\n    145, 146, 145, 146\n  ]],\n};\n\nfunction Test({ classes }) {\n  const [calledMethods, setCalledMethods] = useState([]);\n  const [receivedData, setReceivedData] = useState([]);\n  const [receivedError, setReceivedError] = useState([]);\n  const [ errors, setErrors ] = useState([]);\n  const [url, setUrl] = useState('loading...');\n  const [aituBridge, setAituBridge] = useState();\n  const [version, setVersion] = useState('');\n\n  useEffect(() => {\n    setUrl(window.location.href);\n\n    window.AITU_ORIGIN = 'http://localhost:3000';\n    setAituBridge(require('@btsd/aitu-bridge').default);\n    setVersion(require('@btsd/aitu-bridge').version);\n  }, []);\n\n  const setShakeHandlerParams = {\n    log: [() => setReceivedData(prevArray => [...prevArray, 'Shaken'])],\n    off: [null],\n  };\n\n  const setTabActiveHandlerParams = {\n    log: [(tabname) => setReceivedData(prevArray => [...prevArray, tabname])],\n    off: [null],\n  };\n\n  const handleInvokeFakeMethod = async (methodName = 'fakeMethod') => {\n    setCalledMethods(prevArray => [...prevArray, methodName])\n\n    console.log(`===handle ${methodName} method`);\n    try {\n      const data = await aituBridge.invoke(methodName);\n      setReceivedData(prevArray => [...prevArray, JSON.stringify(data)])\n    } catch(e) {\n      console.error(e);\n      setReceivedError(prevArray => [...prevArray, JSON.stringify(e)])\n    }\n  }\n\n  const handleMethod = async (methodName, params = []) => {\n    if (!invokeMethods.includes(methodName) && !aituBridge.supports(methodName)) {\n      setErrors(prevArray => [...prevArray, `Метод \"${methodName}\" не поддерживается в текущей версии приложения`]);\n      return;\n    }\n    setCalledMethods(prevArray => [...prevArray, methodName])\n\n    console.log(`==handle ${methodName} method${params.length > 0 ? ` with params ${JSON.stringify(params)}`: ''}`);\n    try {\n      const data = await aituBridge[methodName](...params);\n      setReceivedData(prevArray => [...prevArray, JSON.stringify(data)])\n    } catch(e) {\n      console.error(e);\n      const errorText = e instanceof Error ? `${e.name}: ${e.message}` : JSON.stringify(e);\n      setReceivedError(prevArray => [...prevArray, errorText])\n    }\n  }\n\n  return (\n    <div className={classes.testWrapper}>\n      <h6>{version}</h6>\n      <a href=\"/test2\">To test2</a><br />\n      <a href=\"/test-share\">To test share</a>\n      <div className={classes.btnWrapper}><span>Current url: {url}</span></div>\n      <div className={classes.btnWrapper}>\n        <button onClick={() => handleMethod('getMe')}>getMe</button>\n        <button onClick={() => handleMethod('getPhone')}>getPhone</button>\n        <button onClick={() => handleInvokeFakeMethod()}>fakeMethod</button>\n        <button onClick={() => handleMethod('getContacts')}>getContacts</button>\n        <button onClick={() => handleMethod('getGeo')}>getGeo</button>\n        <button onClick={() => handleMethod('getQr')}>getQr</button>\n        <button onClick={() => handleMethod('getSMSCode')}>getSMSCode</button>\n        <button onClick={() => handleMethod('getUserProfile', [{ id: commonParams.userIdProd }])}>getUserProfile (prod)</button>\n        <button onClick={() => handleMethod('getUserProfile', [{ id: commonParams.userIdDev }])}>getUserProfile (dev)</button>\n        <button onClick={() => handleMethod('openSettings')}>openSettings</button>\n        <button onClick={() => handleMethod('selectContact')}>selectContact</button>\n        <button onClick={() => handleMethod('setTitle', 'text for title')}>setTitle</button>\n        <button onClick={() => handleMethod('closeApplication')}>closeApplication</button>\n      </div>\n      <div className={classes.btnWrapper}>\n        <button onClick={() => handleMethod('copyToClipboard', copyToClipboardParams)}>copyToClipboard</button>\n        <button onClick={() => handleMethod('share', shareParams.textOnly)}>share text</button>\n        <button onClick={() => handleMethod('shareImage', shareParams.jpg)}>shareImage jpg</button>\n        <button onClick={() => handleMethod('shareImage', shareParams.gif)}>shareImage gif</button>\n        <button onClick={() => handleMethod('shareImage', shareParams.png)}>shareImage png</button>\n        <button onClick={() => handleMethod('shareImage', shareParams.jpgOnly)}>shareImage jpg w/o caption</button>\n      </div>\n      <div className={classes.btnWrapper}>\n        <button onClick={() => handleMethod('vibrate', vibrateParams.once)}>vibrate once</button>\n        <button onClick={() => handleMethod('vibrate', vibrateParams.march)}>vibrate march</button>\n        <button onClick={() => handleMethod('setShakeHandler', setShakeHandlerParams.log)}>enable log on shake</button>\n        <button onClick={() => handleMethod('setShakeHandler', setShakeHandlerParams.off)}>disable log on shake</button>\n        <button onClick={() => handleMethod('setTabActiveHandler', setTabActiveHandlerParams.log)}>enable log on tab click</button>\n      </div>\n      <div className={classes.btnWrapper}>\n        <button onClick={() => handleMethod('enableNotifications')}>enableNotifications</button>\n        <button onClick={() => handleMethod('disableNotifications')}>disableNotifications</button>\n      </div>\n      <div className={classes.btnWrapper}>\n        <button onClick={() => handleMethod('enableScreenCapture')}>enableScreenCapture</button>\n        <button onClick={() => handleMethod('disableScreenCapture')}>disableScreenCapture</button>\n      </div>\n      <div className={classes.btnWrapper}>\n        <a href=\"/javascriptquestions.pdf\">PDF Link</a>\n        <a href=\"https://i2.app.link/rNwc1ePWheb?promocode=ABCDE\">Contest mini-app</a>\n        <a href=\"https://i2.app.link/open_chat_with?user_id=a92a86e7-e677-11e8-89fc-5a93b0f4e028\">DeepLink Open Chat</a>\n      </div>\n      <div style={{ marginTop: 20 }} >\n        <b>Errors:</b>\n        {errors.map((errMessage, i) => (\n            <div key={i + errMessage}>{errMessage}</div>\n          ))}\n      </div>\n      <div style={{ marginTop: 20, display: 'flex' }}>\n        <div style={{ width: '30%' }}>\n          <b style={{ marginBottom: 10 }}>Invoked methods:</b>\n          {calledMethods.map((method, i) => {\n            return (\n              <div key={i + method}>{i+1 + ') '}{method}</div>\n            );\n          })}\n        </div>\n        <div style={{ width: '30%' }}>\n          <b style={{ marginBottom: 10 }}>Received data:</b>\n          {receivedData && receivedData.map((data, i) => {\n            return (\n              <div key={i + data}>{i+1 + '. '}{data}</div>\n            )\n          })}\n        </div>\n        <div style={{ width: '30%' }}>\n          <b style={{ marginBottom: 10 }}>Received errors:</b>\n          {receivedError && receivedError.map((error, i) => {\n            return (\n              <div key={i + error}>{i+1 + '. '}{error}</div>\n            )\n          })}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default withStyles(styles)(Test);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAJA;AANA;AAiBA;AAEA;AAEA;AACA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AAFA;AACA;AAoBA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAQA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AACA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAHA;AAAA;AAAA;AACA;AADA;AAKA;AACA;AAAA;AAAA;AANA;AAAA;AACA;AADA;AAAA;AAAA;AAQA;AACA;AAAA;AAAA;AACA;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAFA;AACA;AADA;AAKA;AAAA;AAAA;AAEA;AAPA;AAAA;AAAA;AACA;AADA;AASA;AACA;AAAA;AAAA;AAVA;AAAA;AACA;AADA;AAAA;AAAA;AAYA;AACA;AACA;AAAA;AAAA;AACA;AAfA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAisourceRoot":""}